(*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
----------------------------------------------------------------------*)

-->begin
#light "off"
-->namespace
open System;
open System.IO;
open System.Collections.Generic;
open Scanner;

type Error = Error of int * int * string

type Errors() =
class
        let errors = new List<Error>()
	member x.SynErr ((line:int), (col:int), (n:int)) =
		let s = match n with
-->errors
			| _ -> "error " + (n.ToString())
		in
                        errors.Add(Error(line,col,s));
	
	member x.SemErr ((line:int), (col:int), (s:string)) = errors.Add(Error(line,col,s));
	member x.SemErr (s:string) = errors.Add(Error(0,0,s));
	member x.Warning((line:int), (col:int), (s:string)) = errors.Add(Error(line,col,s));
	member x.Warning(s:string) = errors.Add(Error(0,0,s));
        member x.ToList() = List.ofSeq errors
end // Errors


type parser(scan:scanner) =
class
-->constants
	let minErrDist:int              = 2
	let mutable scanner:scanner     = scan
	let mutable errors:Errors       = new Errors()
	let mutable t:Token             = new Token(0,0,0,0,"dummy",None)
	let mutable la:Token            = new Token(0,0,0,0,"dummy",None)
	let mutable errDist:int         = 2

-->declarations
        member x.Errors = errors.ToList()

	member x.SynErr(n:int) = 
		if (errDist >= minErrDist) then errors.SynErr(la.line, la.col, n);
		errDist <- 0;
	

	member x.SemErr(msg:string) =
		if (errDist >= minErrDist) then errors.SemErr(t.line, t.col, msg);
		errDist <- 0;
	
	
	member x.Get() =
		let bboll = ref true in
		while !bboll do
			t <- la;
			la <-scanner.Scan();
			if(la.kind <= maxT)
			then(
				errDist <- errDist + 1;
				bboll:=false;
			);
			-->pragmas
			if(!bboll) then la <- t;
		done;
	
	
	
	member x.Expect (n:int) =
		if (la.kind = n) then x.Get() else  x.SynErr(n); 
	
	
	member x.StartOf (s:int) = x.set(s, (la.kind))
	
	
		member x.ExpectWeak ((n:int), (follow:int) ) =
		if (la.kind = n) then x.Get()
		else (
			x.SynErr(n);
			while (not(x.StartOf(follow)))do x.Get(); done;
		)
	
	
	member x.WeakSeparator((n:int), (syFol:int), (repFol:int)) =
		let kind = ref la.kind in
		if (!kind = n) then ( x.Get(); true )
		else 
			if (x.StartOf(repFol)) then false
			else(
				x.SynErr(n);
				while(not(x.set(syFol, !kind) || x.set(repFol, !kind) || x.set(0, !kind))) do 
					x.Get(); 
					kind:= la.kind;
				done;
				x.StartOf(syFol);
			)
	
	
	
-->productions

	member x.Parse() =
		la <- new Token (0,0,0,0,"dummy",None);
		x.Get();
-->parseRoot
		x.Expect(0);
	
	
	member x.Find((n:int), (bf:bool array) ) =
		try
			let t =	(bf.GetValue(int64 n):?>bool) in
			t
		with _ -> false
	
	
	member x.set((a:int),(b:int))= 
		match a with
-->initialization
		|_ -> false

end

$$$
